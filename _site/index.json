{
  "index.html": {
    "href": "index.html",
    "title": "OSIsoft Adapter for BACnet",
    "keywords": "OSIsoft Adapter for BACnet ======="
  },
  "README.html": {
    "href": "README.html",
    "title": "Edge Adapter BACnet Docs",
    "keywords": "Edge Adapter BACnet Docs"
  },
  "V1/Configuration/Configuration.html": {
    "href": "V1/Configuration/Configuration.html",
    "title": "Configuration",
    "keywords": "Configuration OSIsoft Adapter for BACnet provides configuration of data source and data selection. The adapter also provides configuration of security and the ability to generate a data selection file instead of manual configuration. The examples in the configuration topics use curl, a commonly available tool on both Windows and Linux. The adapter can be configured with any programming language or tool that supports making REST calls, or with the EdgeCmd utility. For more information, see EdgeCmd utility . To validate successful configurations, you can perform data retrieval (GET commands) using a browser, if available on your device. For more information on OSIsoft adapter configuration tools, see Configuration tools ."
  },
  "V1/Configuration/OSIsoft Adapter for BACnet data selection configuration.html": {
    "href": "V1/Configuration/OSIsoft Adapter for BACnet data selection configuration.html",
    "title": "OSIsoft Adapter for BACnet data selection configuration",
    "keywords": "OSIsoft Adapter for BACnet data selection configuration In addition to the data source configuration, you need to provide a data selection configuration to specify the data you want the BACnet adapter to collect from the data sources. When you add a data source, the BACnet adapter will discover devices and objects specified in the configuration. BACnet device configuration During data source discovery, device information for all discovered devices is retrieved by the adapter, which is subsequently available through the following REST endpoint using any configuration tool that can execute an HTTP GET command: http://localhost:5590/api/v1/configuration/<adapterId>/DeviceConfiguration/ . Note: The device configuration is read only and only supports HTTP GET. The device configuration may be used to choose an appropriate DataCollectionMode when configuring data selection. The following is an example of BACnet device configuration that contains one routed device: { \"419\": { \"DeviceIP\": \"10.12.8.64\", \"DeviceId\": 419, \"NetworkNumber\": 20, \"MacAddress\": \"ba:cb:00:5a:c4:16\", \"MaxApduSupported\": 480, \"SegmentationSupported\": \"MaxSegmentation\", \"ServicesSupported\": [ \"WhoIs\", \"IAm\", \"ReadProperty\", \"ReadPropertyMultiple\" ] } } Configure BACnet data selection Note: You cannot modify BACnet data selection configurations manually. You must use the REST endpoints to add or edit the configuration. Complete the following to configure the BACnet data selection: Using any text editor, create a file that contains an BACnet data selection in JSON form. For content structure, see BACnet data selection example . For a table of all available parameters, see BACnet data selection . Save the file, for example as DataSelection.config.json . Use any of the Configuration tools capable of making HTTP requests to execute a POST command with the contents of that file to the following endpoint: http://localhost:5590/api/v1/configuration/<adapterId>/DataSelection/ Example using curl (run this command from the same directory where the file is located): Note: During installation, you can add a single BACnet adapter named BACnet1. The following example uses this component name. curl -v -d \"@DataSelection.config.json\" -H \"Content-Type: application/json\" \"http://localhost:5590/api/v1/configuration/BACnet1/DataSelection\" BACnet data selection schema The full schema definition for the BACnet data selection configuration is in the BACnet_DataSelection_schema.json here: Windows: %Program Files%\\OSIsoft\\Adapters\\BACnet\\Schemas Linux: /opt/OSIsoft/Adapters/BACnet/Schemas BACnet data selection parameters The following parameters can be used to configure BACnet data selection: Parameter Required Type Nullable Description Selected Optional boolean No Use this field to select or clear a measurement. To select an item, set to true. To remove an item, leave the field empty or set to false. If not configured, the default value is false. Name Optional string Yes The optional friendly name of the data item collected from the data source. If not configured, the default value will be the stream id. StreamID Optional string Yes The custom stream ID used to create the streams. If not specified, the BACnet adapter will generate a default stream ID based on the measurement configuration. A properly configured custom stream ID follows these rules: Is not case-sensitive. Can contain spaces. Cannot start with two underscores (\"__\"). Can contain a maximum of 100 characters. Cannot use the following characters: / : ? # [ ] @ ! $ & ' ( ) \\ * + , ; = % < > | Cannot start or end with a period. Cannot contain consecutive periods. Cannot consist of only periods. DeviceIPAddress Required string Yes Device IP Address ObjectType Required string No Any of the supported object types ObjectId Required number Yes BACnet object instance number DataCollectionMode Required string No Specifies the mode of data collection for the item. Default and only value is Poll DataCollectionInterval Required number Yes Specifies the interval (in seconds) at which data is collected for the item. Default value is 300 ObjectProperties Optional string[] Yes Specifies which properties to collect from the BACnet object. If left empty, PresentValue and StatusFlags are collected. Default is empty. BACnet data selection example The following is an example of valid BACnet data selection configuration. Since the second item has selected set to false, data will not be collected for it. [ { \"Selected\": true, \"Name\": \"10.12.112.40_14.AnalogInput90\", \"StreamId\": \"10.12.112.40_14.AnalogInput90\", \"DeviceIPAddress\": \"10.12.112.40\", \"DeviceId\": 14, \"ObjectType\": \"AnalogInput\", \"ObjectId\": 90, \"DataCollectionMode\": \"Poll\", \"DataCollectionInterval\": 300, }, { \"Selected\": false, \"Name\": \"10.12.112.40_16.AnalogOutput70\", \"StreamId\": \"10.12.112.40_16.AnalogOutput70\", \"DeviceIPAddress\": \"10.12.112.40\", \"DeviceId\": 16, \"ObjectType\": \"AnalogOutput\", \"ObjectId\": 70, \"DataCollectionMode\": \"Poll\", \"DataCollectionInterval\": 200, \"ObjectProperties\": [\"PresentValue\"] } ]"
  },
  "V1/Configuration/OSIsoft Adapter for BACnet data source configuration.html": {
    "href": "V1/Configuration/OSIsoft Adapter for BACnet data source configuration.html",
    "title": "OSIsoft Adapter for BACnet data source configuration",
    "keywords": "OSIsoft Adapter for BACnet data source configuration To use the BACnet adapter, you must configure the data source from which it will be receiving data. Configure BACnet data source Note: You cannot modify BACnet data source configurations manually. You must use the REST endpoints to add or edit the configuration. Complete the following procedure to configure the BACnet data source: Using any text editor, create a file that contains a BACnet data source in JSON form. For content structure, see BACnet router data source example . For a table of all available parameters, see BACnet data source parameters . Save the file, for example as DataSource.config.json . Use any of the Configuration tools capable of making HTTP requests to execute a POST command with the contents of that file to the following endpoint: http://localhost:<Port>/api/v1/configuration/<adapterId>/DataSource/ . Note: The following example uses BACnet1 as the adapter component name. For more information on how to add a component, see System components configuration. 5590 is the default port number. If you selected a different port number, replace it with that value. curl -v -d \"@DataSource.config.json\" -H \"Content-Type: application/json\" \"http://localhost:5590/api/v1/configuration/BACnet1/DataSource\" Note: After you have completed data source configuration, the next step is to configure data selection. For more information, See OSIsoft Adapter for BACnet data selection configuration . BACnet data source schema The full schema definition for the BACnet data source configuration is in the BACnet_DataSource_schema.json here: Windows: %Program Files%\\OSIsoft\\Adapters\\BACnet\\Schemas Linux: /opt/OSIsoft/Adapters/BACnet/Schemas BACnet data source parameters The following parameters can be used to configure an BACnet data source: Parameter Required Type Nullable Description IPAddress Required string Yes IPv4 address of BACnet device or BACnet router Port Optional number No UDP port number for communication with BACnet devices. The value ranges from 0 to 65535. If not configured, the default port is 47808 (which is the default port for BACnet protocol). MaxConcurrentNetworkRequests Optional number No The maximum number of requests that can be sent concurrently on the network. This is not affected by the response time for the requests. A value of 0 indicates no limit. The default is 1. DeviceRequestDelay Optional number No The delay in milliseconds between sending requests to an individual device. The value ranges from 0 to 10000 milliseconds. The default is 0 ms. AllowedConsecutiveFailedRequests Optional number No The number of consecutive failed requests to a device before setting the device status to disconnected and waiting DeviceReconnectInterval to try sending requests again. The value ranges from 3 to 1000. The default is 3. DeviceReconnectInterval Optional number No The amount of time in minutes to wait before attempting to send requests to a device after it has disconnected. The value must be greater than 0. The default is 60 minutes. DeviceId Optional number yes Device instance number. If specified, indicates IPAddress is for a BACnet device (not a BACnet router). If empty, indicates the IPAddress is for a BACnet router (not an individual BACnet device). NetworkNumber Optional number Yes Device network number for routed BACnet devices. This setting can only be specified when a DeviceId is specified. When this setting is specified, MACAddress must also be specified MacAddress Optional string Yes Device MAC address for routed BACnet devices. This setting can only be specified when a DeviceId is specified. When this setting is specified, NetworkNumber must also be specified. It must contain 1-6 byte strings in hexadecimal format, separated by a dash '-' or colon ':'. For example, 12:34:ef:cd StreamPrefix Optional string Yes Specifies what prefix is used for Stream IDs and names. Note: An empty string means no prefix will be added to the Stream IDs and names. Null value means ComponentID followed by dot character will be added to the stream IDs and names. ApplyPrefixToStreamId Optional boolean No Parameter applied to all data items collected from the data source that have custom stream ID configured. If configured, the adapter will apply the StreamIdPrefix property to all the streams with custom ID configured. The property does not affect any streams with default ID configured BACnet router data source example The following is an example of valid BACnet data source configuration: { \"IPAddress\": \"192.168.1.1\", \"Port\": 47808, \"MaxConcurrentNetworkRequests\" : 5, \"DeviceRequestDelay\": 10, \"AllowedConsecutiveFailedRequests\": 3, \"DeviceReconnectInterval\": 120 } BACnet routed device data source example The following is an example of valid BACnet routed device data source configuration: { \"IPAddress\": \"192.168.1.1\", \"Port\": 47808, \"MaxConcurrentNetworkRequests\" : 5, \"DeviceRequestDelay\": 10, \"AllowedConsecutiveFailedRequests\": 3, \"DeviceReconnectInterval\": 120, \"DeviceID\": 1, \"NetworkNumber\": 100, \"MacAddress\": \"12\" } Discovery The BACnet Adapter will be able to discover available BACnet devices and objects defined by the data source configuration. In the case of discovery for a BACnet router, the adapter will send a Who-Is request and wait 30 seconds to receive I-Am responses from available devices. Upon receiving an I-Am response, the adapter will request the Protocol Services Supported and Object List properties from the available devices. In the case of discovering a single device, the adapter will not send a Who-Is request but will immediately move to requesting the properties. A successful discovery will result in populating DataSelection Configuration and DeviceConfiguration . DataSelection will be populated with Selected attribute for all items set to false. DeviceConfiguration is read-only and will provide more information such as segmentation and services that are supported. This will help make informed decisions during data selection. Note: Discovery will only be triggered when adding a new data source and DataSelection configuration is empty. Discovery will not be triggered if any DataSelection configuration exists."
  },
  "V1/Configuration/OSIsoft Adapter for BACnet security configuration.html": {
    "href": "V1/Configuration/OSIsoft Adapter for BACnet security configuration.html",
    "title": "OSIsoft Adapter for BACnet security configuration",
    "keywords": "OSIsoft Adapter for BACnet security configuration The BACnet security standard is concerned with the authentication of client and server applications, the authentication of users and confidentiality of their communication. As the security model relies heavily on Transport Level Security (TLS) to establish a secure communication link with an BACnet server, each client, including the OSIsoft adapter, must have a digital certificate deployed and configured. Certificates uniquely identify client applications and machines on servers, and allow for creation of a secure communication link when trusted on both sides. BACnet adapter generates a self-signed certificate when the first secure connection attempt is made. Each BACnet adapter instance creates a certificate store where its own certificates, as well as those of the server, will be persisted. Configure BACnet adapter security Complete the following procedure to configure BACnet adapter security: In your data source configuration, set UseSecureConnection to true . For more information, see OSIsoft Adapter for BACnet data source configuration . The adapter verifies whether the server certificate is present in the adapter trusted certificates folder and is therefore trusted. In case the certificates were not exchanged before the first attemped connection, the adapter persists the server certificate within the adapter rejected certificates folder and the following warning message about the rejected server certificate will be printed: ~~2019-09-08 11:45:48.093 +01:00~~ [Warning] Rejected Certificate: \"DC=MyServer.MyDomain.int, O=Prosys BACnet, CN=Simulation Manually move the server certificate from the RejectedCertificates\\certs folder to the Trusted\\certs folder using a file explorer or command-line interpreter. Linux example using command-line: mv /usr/share/OSIsoft/Adapters/BACnet/BACnet1/Certificates/RejectedCertificates/certsSimulationServer\\ \\[F9823DCF607063DBCECCF6F8F39FD2584F46AEBB\\].der /usr/share/OSIsoft/Adapters/BACnet/BACnet1/Certificates/Trusted/certs/ Note: Administrator or root privileges are required to perform this operation. Once the certificate is in the adapter trusted certificates folder, the adapter trusts the server and the connection attempt proceeds in making the connection call to the configured server. Add the certificate of the adapter to the server's trust store. The connection succeeds only when the adapter certificate is trusted on the server side. For more details on how to make a client certificate trusted, see your BACnet server documentation. In general, servers work in a similar fashion as the clients, hence you can take a similar approach for making the server certificate trusted on the client side. When certificates are mutually trusted, the connection attempt succeeds and the adapter is connected to the most secure endpoint provided by the server. Certificate locations Adapter rejected certificates Windows: %programdata%\\OSIsoft\\Adapters\\BACnet\\{ComponentId}\\Certificates\\RejectedCertificates\\certs Linux: /usr/share/OSIsoft/Adapters/BACnet/{ComponentId}/Certificates/RejectedCertificates/certs Adapter trusted certificates Windows: %programdata%\\OSIsoft\\Adapters\\BACnet\\{ComponentId}\\Certificates\\Trusted\\certs Linux: /usr/share/OSIsoft/Adapters/BACnet/{ComponentId}/Certificates/Trusted/certs Certificate of the adapter Windows: %programdata%\\OSIsoft\\Adapters\\BACnet\\{ComponentId}\\Certificates\\My\\certs Linux: /usr/share/OSIsoft/Adapters/BACnet/{ComponentId}/Certificates\\My\\certs"
  },
  "V1/Health/Adapter health for BACnet.html": {
    "href": "V1/Health/Adapter health for BACnet.html",
    "title": "Adapter health",
    "keywords": "Adapter health OSIsoft adapters produce different kinds of health data, which can be egressed to different health endpoints. For details, see the following sections. Available health data Dynamic data is sent every minute to configured health endpoints. The following health data are available: Device status Next Health Message Expected Health endpoint differences Two following two OMF endpoints are currently supported for adapter health data: PI Web API OSIsoft Cloud Services There are a few differences in how these two systems treat the associated health data. PI Web API parses the information and sends it configured PI Systems for the OMF endpoint. The static data is used to create a hierarchy on a PI AF server similar to the following: The dynamic health data is actually time-series data that is stored in PI points on a PI Data Archive and can be seen in the AF hierarchy as PI Point Data Reference attributes. OSIsoft Cloud Services currently does not have a way to store the static metadata. For OCS-based adapter health endpoints, only the dynamic data will be stored. Each value will be its own stream with the timestamp property as the single index."
  },
  "V1/Health/Device status for BACnet.html": {
    "href": "V1/Health/Device status for BACnet.html",
    "title": "Device status",
    "keywords": "Device status The device status indicates the health of this component and if it is currently communicating properly with the data source. This time-series data is stored within a PI point or OCS stream, depending on the endpoint type. The BACnet Adapter will send a status value of \"Good\" when all configured BACnet devices and routers are responding within the specified timeout. When a BACnet device fails to respond to more than AllowedConsecutiveFailedRequests (see OSIsoft Adapter for BACnet data source configuration ), it is considered disconnected and a \"DeviceInError\" status is sent. Upon any individual device transitioning from connected to disconnected or back, an appropriate status is sent depending on if there are one or more disconnected devices (DeviceInError) or all are connected (Good). Property Type Description Time string Timestamp of the event. DeviceStatus string The value of the DeviceStatus. The possible statuses are: Status Meaning Good The component is connected to the data source and it is collecting data. ConnectedNoData The component is connected to the data source but it is not receiving data from it. AttemptingFailover The adapter is attempting to failover. Starting The component is currently in the process of starting up and is not yet connected to the data source. DeviceInError The component encountered an error either while connecting to the data source or attempting to collect data. Shutdown The component is either in the process of shutting down or has finished. Removed The adapter component has been removed and will no longer collect data. NotConfigured The adapter component has been created but is not yet configured."
  },
  "V1/Health/Health and diagnostics for BACnet.html": {
    "href": "V1/Health/Health and diagnostics for BACnet.html",
    "title": "Health and Diagnostics",
    "keywords": "Health and Diagnostics OSIsoft adapters produce various types of health data. You can use health data to ensure that your adapters are running properly and data is flowing to the configured OSIsoft OMF endpoints. For more information, see Adapter health . TEST OSIsoft adapters also produce diagnostic data. You can use diagnostic data to find more information about a particular adapter instance. Diagnostic data lives alongside the health data and you can egress it using a Health Endpoint and setting EnableDiagnostics = true. For more information, see Adapter diagnostics . The examples in the configuration topics use curl, a commonly available tool on both Windows and Linux. The adapter can be configured with any programming language or tool that supports making REST calls, or with the EdgeCmd utility. For more information, see the EdgeCmd utility documentation (https://osisoft.github.io/Edgecmd-Docs/V1/EdgeCmd_utility.html) . To validate successful configurations, you can perform data retrieval (GET commands) using a browser, if available on your device. For more information on OSIsoft adapter configuration tools, see Configuration tools ."
  },
  "V1/Health/Next health message expected for BACnet.html": {
    "href": "V1/Health/Next health message expected for BACnet.html",
    "title": "Next health message expected",
    "keywords": "Next health message expected This property is similar to a heartbeat. A new value for NextHealthMessageExpected will be sent by an individual adapter data component on a periodic basis while it is functioning properly. This value will be a timestamp indicating when the next value should be received. When monitoring, if the next value is not received by the indicated time, this likely means that there is an issue. It could be an issue with the adapter, adapter component, network connection between the health endpoint and the adapter, etc. Property Type Description Time string Timestamp of the event. NextHealthMessageExpected string Timestamp when next value is expected."
  },
  "V1/index.html": {
    "href": "V1/index.html",
    "title": "OSIsoft Adapter for OPC UA",
    "keywords": "OSIsoft Adapter for OPC UA ======= OSIsoft Adapter for BACnet overview OSIsoft Adapter for BACnet supported features OSIsoft Adapter for BACnet principles of operation Installation Install the adapter Install OSIsoft Adapter for BACnet using Docker Uninstall the adapter Configuration Configuration tools System components configuration OSIsoft Adapter for BACnet data source configuration OSIsoft Adapter for BACnet data selection configuration OSIsoft Adapter for BACnet security configuration Egress endpoints configuration Health endpoint configuration Diagnostics configuration Buffering configuration Logging configuration System and adapter configuration Administration Start and stop an adapter Start and stop ingress component Retrieve product version information Delete an adapter component Health and diagnostics Adapter health Device status Next health message expected Adapter diagnostics System Stream count IO rate Error rate Egress diagnostics"
  },
  "V1/Installation/Install the adapter with Docker for BACnet.html": {
    "href": "V1/Installation/Install the adapter with Docker for BACnet.html",
    "title": "Install OSIsoft Adapter for BACnet using Docker",
    "keywords": "Install OSIsoft Adapter for BACnet using Docker Docker is a set of tools that can be used on Linux to manage application deployments. If you want to use Docker, you must be familiar with the underlying technology and have determined that it is appropriate for your planned use of the BACnet Adapter. Docker is not a requirement to use BACnet Adapter. This topic provides examples of how to create a Docker container with the BACnet Adapter. Create a startup script for the Adapter Using the text editor of your choice, create a script similar to the following and put it in the directory where you plan to create the container. The script varies slightly by processor. Name the script bacnetdockerstart.sh. ARM32 #!/bin/sh #local variables defaultPort=5590 #regexp to only accept numerals re='^[0-9]+$' portConfigFile=\"/BACnet_linux-arm/appsettings.json\" #validate the port number input if [ -z $portnum ] ; then portnum=${defaultPort} echo \"Default value selected.\" ; else echo $portnum | grep -q -E $re isNum=$? if [ $isNum -ne 0 ] || [ $portnum -le 1023 ] || [ $portnum -gt 49151 ] ; then echo \"Invalid input. Setting default value ${defaultPort} instead...\" portnum=${defaultPort} ; fi fi echo \"configuring port ${portnum}\" #write out the port config file cat > ${portConfigFile} << EOF { \"ApplicationSettings\": { \"Port\": ${portnum}, \"ApplicationDataDirectory\": \"/usr/share/OSIsoft/Adapters/BACnet/BACnet\" } } EOF exec /BACnet_linux-arm/OSIsoft.Data.System.Host ARM64 #!/bin/sh #local variables defaultPort=5590 #regexp to only accept numerals re='^[0-9]+$' portConfigFile=\"/BACnet_linux-arm64/appsettings.json\" #validate the port number input if [ -z $portnum ] ; then portnum=${defaultPort} echo \"Default value selected.\" ; else echo $portnum | grep -q -E $re isNum=$? if [ $isNum -ne 0 ] || [ $portnum -le 1023 ] || [ $portnum -gt 49151 ] ; then echo \"Invalid input. Setting default value ${defaultPort} instead...\" portnum=${defaultPort} ; fi fi echo \"configuring port ${portnum}\" #write out the port config file cat > ${portConfigFile} << EOF { \"ApplicationSettings\": { \"Port\": ${portnum}, \"ApplicationDataDirectory\": \"/usr/share/OSIsoft/Adapters/BACnet/BACnet\" } } EOF exec /BACnet_linux-arm64/OSIsoft.Data.System.Host AMD64 #!/bin/sh #local variables defaultPort=5590 #regexp to only accept numerals re='^[0-9]+$' portConfigFile=\"/BACnet_linux-x64/appsettings.json\" #validate the port number input if [ -z $portnum ] ; then portnum=${defaultPort} echo \"Default value selected.\" ; else echo $portnum | grep -q -E $re isNum=$? if [ $isNum -ne 0 ] || [ $portnum -le 1023 ] || [ $portnum -gt 49151 ] ; then echo \"Invalid input. Setting default value ${defaultPort} instead...\" portnum=${defaultPort} ; fi fi echo \"configuring port ${portnum}\" #write out the port config file cat > ${portConfigFile} << EOF { \"ApplicationSettings\": { \"Port\": ${portnum}, \"ApplicationDataDirectory\": \"/usr/share/OSIsoft/Adapters/BACnet/BACnet\" } } EOF exec /BACnet_linux-x64/OSIsoft.Data.System.Host Create a Docker container containing the BACnet Adapter Create the following Dockerfile in the directory where you want to create and run the container. Dockerfile is the required name of the file, and which variation you will use depends on the operating system you are using: ARM32 FROM ubuntu WORKDIR / RUN apt-get update && DEBIAN_FRONTEND=noninteractive apt-get install -y --no-install-recommends libicu60 libssl1.0.0 COPY bacnetdockerstart.sh / RUN chmod +x /bacnetdockerstart.sh ADD ./BACnet_linux-arm.tar.gz . ENTRYPOINT [\"/bacnetdockerstart.sh\"] ARM64 FROM ubuntu WORKDIR / RUN apt-get update && DEBIAN_FRONTEND=noninteractive apt-get install -y --no-install-recommends libicu60 libssl1.0.0 COPY bacnetdockerstart.sh / RUN chmod +x /bacnetdockerstart.sh ADD ./BACnet_linux-arm64.tar.gz . ENTRYPOINT [\"/bacnetdockerstart.sh\"] AMD64 (x64) FROM ubuntu WORKDIR / RUN apt-get update && DEBIAN_FRONTEND=noninteractive apt-get install -y --no-install-recommends libicu60 libssl1.0.0 COPY bacnetdockerstart.sh / RUN chmod +x /bacnetdockerstart.sh ADD ./BACnet_linux-x64.tar.gz . ENTRYPOINT [\"/bacnetdockerstart.sh\"] Copy the appropriate BACnet_linux-(x64, arm, or arm64 depending upon platform).tar.gz file to the same directory as the Dockerfile. Run the following command line in the same directory (sudo may be necessary): docker build -t bacnetadapter . Run the BACnet Adapter Docker containers REST access from the local machine from Docker Complete the following to run the container: Open command line. Type the following in the command line (sudo may be necessary): docker run -d --network host bacnetadapter Port 5590 is accessible from the host and you can make REST calls to BACnet Adapter from applications on the local host computer. In this example, all data stored by the BACnet Adapter is stored in the container itself. When the container is deleted, the data stored is also deleted. Persistent storage on the local file system from Docker Complete the following to run the container: Open a terminal window. Type the following in the command line (sudo may be necessary): docker run -d --network host -v /bacnet:/usr/share/OSIsoft/ bacnetadapter Port 5590 is accessible from the host and you can make REST calls to BACnet Adapter from applications on the local host computer. In this example, all data that would be written to the container is instead written to the host directory. In this example the host directory is a directory on the local machine, /bacnet. You can specify any directory. Port number change To use a different port other than 5590 you can specify a portnum variable on the docker run command line. For example, in order to start up the adapter using port 6000 instead of 5590 you would use the command line: docker run -d -e portnum=6000 --network host bacnetadapter Then instead of accessing the REST API using port 5590 you would use port 6000. The following curl command would return the configuration for the container. curl http://localhost:6000/api/v1/configuration Limiting local host access to Docker If you remove the --network host option from the docker run command, no REST access is possible from outside the container. This may be of value where you want to host an application in the same container as BACnet Adapter, and do not want to have external REST access enabled."
  },
  "V1/main/README.html": {
    "href": "V1/main/README.html",
    "title": "OSIsoft Adapter Docs",
    "keywords": "OSIsoft Adapter Docs"
  },
  "V1/main/test.html": {
    "href": "V1/main/test.html",
    "title": "",
    "keywords": ""
  },
  "V1/main/V1/Administration/Administration.html": {
    "href": "V1/main/V1/Administration/Administration.html",
    "title": "Administration",
    "keywords": "Administration With the OSIsoft adapter administration level functions, you can start and stop an adapter and the ingress component. You can also retrieve product version information and delete an adapter. The examples in the administration topics use curl, a commonly available tool on both Windows and Linux. You can use the same operations with any programming language or tool that supports making REST calls. You can also configure OSIsoft adapters with the EdgeCmd utility. For more information, see EdgeCmd utility . To validate successful configurations, you can accomplish data retrieval steps (GET commands) using a browser, if available on your device. For more information on OSIsoft adapter configuration tools, see Configuration tools ."
  },
  "V1/main/V1/Administration/Delete an adapter component.html": {
    "href": "V1/main/V1/Administration/Delete an adapter component.html",
    "title": "Delete an adapter component",
    "keywords": "Delete an adapter component When an adapter component is removed, the configuration and log files are saved into a sub-directory in case they are needed later. Any associated types, streams, and data will remain on respective endpoints. Complete the following to delete an adapter component: Start any of the Configuration tools capable of making HTTP requests. Execute a DELETE command to the following endpoint: http://localhost:5595/api/v1/configuration/system/components/<ComponentIdToBeDeleted> Note: An empty DELETE command must be made against the Id of the component to be deleted. Example using curl: curl -v -X DELETE \"http://localhost:5595/api/v1/configuration/system/components/ComponentIdToBeDeleted\" File relocation All configuration and log files will be renamed and moved to a folder called Removed within the respective directory. Configuration files will be moved to .\\Configuration\\Removed; log files to .\\Logs\\Removed . The files are renamed according to the timestamp of removal, for example FileName.json_removed_yyyy-MM-dd--hh-mm-ss . In the following example, one Modbus Adapter service is installed on a particular Windows node with the name ModbusService1. A Modbus component with the name ModbusDeviceX was added and configured to this Modbus adapter and later removed. Linux follows a similar behavior. This is the resulting relocation and renaming scheme after deletion: REST URLs Relative URL HTTP verb Action api/v1/configuration/system/components/{id} DELETE Deletes specified component"
  },
  "V1/main/V1/Administration/Retrieve product version information.html": {
    "href": "V1/main/V1/Administration/Retrieve product version information.html",
    "title": "Retrieve product version information",
    "keywords": "Retrieve product version information The product version information includes the application version, the version of the underlying .NET Core Framework, and the operating system that the adapter is running on. Complete the following to retrieve the product version information of an OSIsoft adapter: Start any configuration tool capable of making HTTP requests. Execute a GET command to the following endpoint: GET http://localhost:5595/api/v1/Diagnostics/ProductInformation Result example: { \"Application Version\": \"1.1.0.0\", \".Net Core Version\": \".NET Core 3.1.0\", \"Operating System\": \"Microsoft Windows 10.0.18362\" }"
  },
  "V1/main/V1/Administration/Start and stop an adapter.html": {
    "href": "V1/main/V1/Administration/Start and stop an adapter.html",
    "title": "Start and stop an adapter",
    "keywords": "Start and stop an adapter Complete the following for your operating system to start or stop an adapter service: Windows Open Windows services. Select OSIsoft Adapter for AdapterName , for example OSIsoft Adapter for Modbus. Depending on whether your adapter is running or not, click either Start or Stop . Linux Open command line. Depending on whether your adapter is running or not, type one of the following: Example: Start OSIsoft Adapter for OPC UA systemctl start OSIsoft Adapter for OPC UA Example: Stop OSIsoft Adapter for Modbus TCP systemctl stop OSIsoft Adapter for Modbus Press Enter."
  },
  "V1/main/V1/Administration/Start and stop ingress component.html": {
    "href": "V1/main/V1/Administration/Start and stop ingress component.html",
    "title": "Start and stop ingress component",
    "keywords": "Start and stop ingress component By default, all currently configured ingress components are started. Start an ingress component Complete the following to start an individual ingress component: Start any configuration tool capable of making HTTP requests. Execute a POST command to the following endpoint, replacing <ingressComponentId> with the ingress component that you want to start: http://localhost:5590/api/v1/administration/<ingressComponentId>/Start Example Start the OpcUa1 ingress component using curl: curl -v -d \"\" http://localhost:5590/api/v1/Administration/OpcUa1/Start An HTTP status 204 message indicates success. Stop an ingress component Complete the following to stop an individual ingress component: Start any configuration tool capable of making HTTP requests. Execute a POST command to the following endpoint, replacing <ingressComponentId> with the ingress component that you want to stop: http://localhost:5590/api/v1/administration/<ingressComponentId>/Stop Example Stop the Modbus1 ingress component using cURL: curl -v -d \"\" http://localhost:5590/api/v1/Administration/Modbus1/Stop An HTTP status 204 message indicates success."
  },
  "V1/main/V1/ARCHIVE/Adapter diagnostics_old.html": {
    "href": "V1/main/V1/ARCHIVE/Adapter diagnostics_old.html",
    "title": "Adapter diagnostics",
    "keywords": "Adapter diagnostics OSIsoft adapters produce diagnostic data which you can use to find more information about a particular adapter instance. This data lives alongside the health data and you can egress it using a Health Endpoint and setting EnableDiagnostics = true. For configuration of health endpoints, see </Health/Health.md>. AF hierarchy When you use PI Web API as a health endpoint, an AF hierarchy is created containing both the diagnostics and health data and metadata. Currently, OSIsoft Cloud Services does not provide a way to store static metadata and only contains the dynamic streams. For more information or to see an example of this hierarchy, see </Health/Health.md>. Stream count The stream count indicates the number of streams and associated types being produced and sent data for a particular adapter instance. Type Property Description string Timestamp Timestamp of event int StreamCount Overall number of streams created by the adapter instance int TypeCount Overall number of types created by the adapter instance IO rate The IO rate indicates the running average number of streams per second being produced by an adapter instance. Type Property Description string Timestamp Timestamp of event double IORate Average data rate (streams/second) Error rate The error rate indicates the average number of errors per second occurring for a particular adapter instance. Type Property Description string Timestamp Timestamp of event double ErrorRate Average error rate (streams/second)"
  },
  "V1/main/V1/ARCHIVE/Egress_DataEndpoints_schema.html": {
    "href": "V1/main/V1/ARCHIVE/Egress_DataEndpoints_schema.html",
    "title": "Egress endpoint configuration schema",
    "keywords": "Egress endpoint configuration schema [{ \"endpoint\": \"https://<pi web api server>/piwebapi/omf/\", \"UserName\": \"<username>\", \"Password\": \"<password>\" }, { \"Endpoint\": \"https://<OCS OMF endpoint>\", \"ClientId\": \"<clientid>\", \"ClientSecret\": \"<clientsecret>\" } ] Abstract Extensible Status Identifiable Custom Properties Additional Properties Defined In Can be instantiated Yes Experimental No Forbidden Forbidden Egress_DataEndpoints_schema.json EgressEndpointConfiguration Properties Property Type Required Nullable Defined by ClientId string Optional Yes EgressEndpointConfiguration (this schema) ClientSecret string Optional Yes EgressEndpointConfiguration (this schema) Endpoint string Required No EgressEndpointConfiguration (this schema) Id string Optional Yes EgressEndpointConfiguration (this schema) Password string Optional Yes EgressEndpointConfiguration (this schema) TokenEndpoint string Optional Yes EgressEndpointConfiguration (this schema) UserName string Optional Yes EgressEndpointConfiguration (this schema) ValidateEndpointCertificate boolean Optional No EgressEndpointConfiguration (this schema) ClientId ClientId is optional type: string defined in this schema ClientId Type string , nullable ClientSecret ClientSecret is optional type: string defined in this schema ClientSecret Type string , nullable Endpoint Endpoint is required type: string defined in this schema Endpoint Type string minimum length: 1 characters Id Id is optional type: string defined in this schema Id Type string , nullable Password Password is optional type: string defined in this schema Password Type string , nullable TokenEndpoint TokenEndpoint is optional type: string defined in this schema TokenEndpoint Type string , nullable UserName UserName is optional type: string defined in this schema UserName Type string , nullable ValidateEndpointCertificate ValidateEndpointCertificate is optional type: boolean defined in this schema ValidateEndpointCertificate Type boolean All of the following requirements need to be fulfilled. Requirement 1 object with following properties: Property Type Required ClientId string Optional ClientSecret string Optional Endpoint string Required Id string Optional Password string Optional TokenEndpoint string Optional UserName string Optional ValidateEndpointCertificate boolean Optional ClientId ClientId is optional type: string ClientId Type string , nullable ClientSecret ClientSecret is optional type: string ClientSecret Type string , nullable Endpoint Endpoint is required type: string Endpoint Type string minimum length: 1 characters Id Id is optional type: string Id Type string , nullable Password Password is optional type: string Password Type string , nullable TokenEndpoint TokenEndpoint is optional type: string TokenEndpoint Type string , nullable UserName UserName is optional type: string UserName Type string , nullable ValidateEndpointCertificate ValidateEndpointCertificate is optional type: boolean ValidateEndpointCertificate Type boolean"
  },
  "V1/main/V1/Configuration/Buffering configuration.html": {
    "href": "V1/main/V1/Configuration/Buffering configuration.html",
    "title": "Buffering configuration",
    "keywords": "Buffering configuration You can configure buffering for data egressed from the adapter to endpoints through the buffering configuration parameters in the system configuration. Note: OSIsoft recommends that you do not modify the default buffering location unless necessary. The changes to the buffering configuration parameters take effect only during adapter service startup. Configure buffering Using any text editor, create a file that contains the buffering configuration in JSON form. For content structure, see the sample output in Examples - Retrieve the buffering configuration . Save the file. Use any of the Configuration tools capable of making HTTP requests and execute a PUT command with the contents of that file to the following endpoint: http://localhost:<port>/api/v1/configuration/system/buffering Buffering schema The full schema definition for the system buffering is in the System_Buffering_schema.json here: Windows: %Program Files%\\OSIsoft\\Adapters\\AdapterName\\Schemas Linux: /opt/OSIsoft/Adapters/AdapterName/Schemas Buffering parameters: Parameter Required Type Description EnableBuffering Optional boolean Enables or disables buffering. Default: True MaxBufferSizeMB Optional Integer Defines the maximum size of the buffer file that will be persisted on disk. The unit is specified in MB (1 Mebibyte = 1048576 bytes). Take into account the capacity and type of the storage medium to determine a suitable value for this parameter. A value of -1 indicates that the buffer file size is restricted only by the available free disk space. Allowed values: -1 or [1, 2147483647]. Default: -1 BufferLocation Optional string Defines the location of the buffer files. Absolute paths are required. Take into account access-control list (ACL) when setting this parameter Allowed value: Valid path to a folder location in the file system. Default: Windows: %ProgramData%\\OSIsoft\\Adapters\\{AdapterType}\\{AdapterInstance}\\Data Linux: /usr/share/OSIsoft/Adapters/{AdatpterType}/{AdapterInstance}/Data Examples The following examples are buffering configurations made through curl REST client. Configure buffering curl -X PUT \"http://localhost:{port}/api/v1/configuration/system/buffering\" -H \"Content-Type: application/json\" -d \"{ \"MaxBufferSizeMB\": 50, \"BufferLocation\": \"C:/ProgramData/OSIsoft/Adapters/NewBuffers\", \"EnableBuffering\": true }\" 204 No Content response indicates success. Retrieve the buffering configuration curl -X GET \"http://localhost:{port}/api/v1/configuration/system/buffering\" Sample output: { \"bufferLocation\": \"C:/ProgramData/OSIsoft/Adapters/Modbus/Modbus/Buffers\", \"maxBufferSizeMB\": -1, \"enableBuffering\": true } 200 OK response indicates success. Update MaxBuferSizeMb parameter curl -X PATCH \"http://localhost:{port}/api/v1/configuration/system/buffering\" -H \"Content-Type: application/json\" -d \"{ \"MaxBufferSizeMB\": 100 }\" 204 No Content response indicates success. Note: In the previous examples, port refers to the configured port that the adapter runs on. REST URIs The relative URI for all buffering configuration actions is api/v1/configuration/system/buffering . HTTP verb Action GET Gets the buffering configuration PUT Replaces the existing buffering configuration PATCH Update parameter, partial configuration"
  },
  "V1/main/V1/Configuration/Configuration tools.html": {
    "href": "V1/main/V1/Configuration/Configuration tools.html",
    "title": "Configuration tools",
    "keywords": "Configuration tools OSIsoft adapters can be configured with either EdgeCmd utility or one of the REST tools described in this topic. EdgeCmd utility You can use the EdgeCmd utility on both Linux and Windows to configure OSIsoft adapters. REST tools The following tools are available to facilitate the execution of REST calls. curl OSIsoft adapter documentation displays curl commands for configuration and management examples. curl is a command line tool supported on Windows and Linux that is used to make HTTP calls. curl has a large range of capabilities. You can accomplish any OSIsoft adapter administrative or programming task with curl. curl is also easily scripted, using Bash or PowerShell on either Linux or Windows. OSIsoft recommends this tool for managing OSIsoft adapters. Any system that can run OSIsoft adapters supports curl. Postman Postman is an effective REST tool for systems with GUI components. OSIsoft adapters are supported on platforms that lack this capability. It is particularly useful for learning more about OSIsoft adapter REST APIs. C#, Python, Go You can use any modern programming language to make REST calls to administer and write programs for OSIsoft adapters. System tools Many OSIsoft customers use Windows computers, even though they may deploy Linux devices to host OSIsoft adapters. You can install OSIsoft adapters on Windows 10, and the same custom applications developed on Windows should work on Linux, as long as the application development environment is supported on Linux. OSIsoft adapters have been designed to use platform independent programming. To facilitate working with Linux devices, Windows tools like PuTTY and WinSCP are very useful for copying files and remotely accessing Linux command lines."
  },
  "V1/main/V1/Configuration/Diagnostics configuration.html": {
    "href": "V1/main/V1/Configuration/Diagnostics configuration.html",
    "title": "Diagnostics configuration",
    "keywords": "Diagnostics configuration This section provides information on how to configure your OSIsoft adapters so that diagnostics data is produced and stored at the designated health endpoint. For more information about adapter diagnostics, see Adapter diagnostics . Configure diagnostics Using any text editor, create a file that contains the diagnostics configuration in JSON form. For content structure, see Example - Retrieve the diagnostics configuration . Save the file. Use any of the Configuration tools capable of making HTTP requests and execute a PUT command with the contents of that file to the following endpoint: http://localhost:{port}/api/v1/configuration/system/diagnostics Note: port refers to the configured port for the adapter to run on. Diagnostics schema The full schema definition for the diagnostics configuration is in the System_Diagnostics_schema.json here: Windows: %Program Files%\\OSIsoft\\Adapters\\AdapterName\\Schemas Linux: /opt/OSIsoft/Adapters/AdapterName/Schemas Diagnostics parameters Parameter Required Type Description EnableDiagnostics Yes boolean Determines whether Diagnostics are enabled. Example Configure diagnostics Example using curl: curl -X PUT http://localhost:{port}/api/v1/configuration/system/diagnostics -H 'Content-Type: application/json' -d '{ \"enableDiagnostics\": true }' If successful, the methods returns a 204 No Content response code. Retrieve the diagnostics configuration Example using curl: curl -X GET http://localhost:{port}/api/v1/configuration/system/diagnostics Sample output: { \"enableDiagnostics\": true } REST URLs Relative URL HTTP verb Action api/v1/configuration/system/diagnostics GET Gets the diagnostics configuration api/v1/configuration/system/diagnostics PUT Replaces the existing diagnostics configuration"
  },
  "V1/main/V1/Configuration/Egress endpoints configuration.html": {
    "href": "V1/main/V1/Configuration/Egress endpoints configuration.html",
    "title": "Egress endpoints configuration",
    "keywords": "Egress endpoints configuration Adapters can egress dynamic data to destinations that you supply through OMF. Supported destinations are OSIsoft Cloud Services and PI servers through PI Web API. An egress endpoint represents a destination to which data will be sent. You can specify multiple endpoints. Every egress endpoint is executed independently of all other egress endpoints and is expected to accept OMF messages. An egress endpoint is comprised of the properties specified under Egress endpoint parameters . Note: Some types, and consequently containers and data, cannot be egressed. For more information, see Egress execution details . Configure egress endpoints Note: You cannot add egress configurations manually because some parameters are encrypted when stored to disk. You must use the REST endpoints to add or edit egress configuration. For additional endpoints, see REST URLs . Complete the following to create new egress endpoints: Using any text editor, create a file that contains one or more egress endpoints in JSON form. For content structure, see Examples . For a table of all available parameters, see Egress endpoint parameters . Save the file, for example as OmfEgress_DataEndpoints.config.json . Use any of the Configuration tools capable of making HTTP requests and execute a POST command with the contents of that file to the following endpoint: http://localhost:5590/api/v1/configuration/OmfEgress/dataendpoints/ Examples using curl: Add endpoints curl -v -d \"@OmfEgress_DataEndpoints.config.json\" -H \"Content-Type: application/json\" -X POST \"http://localhost:5590/api/v1/configuration/OmfEgress/dataendpoints\" curl -v -d \"@OmfEgress_DataEndpoints.config.json\" -H \"Content-Type: application/json\" -X PUT \"http://localhost:5590/api/v1/configuration/OmfEgress/dataendpoints\" Delete an endpoint curl -v -X DELETE \"http://localhost:5590/api/v1/configuration/OmfEgress/dataendpoints/{id}\" Update an endpoint curl -v -d \"@OmfEgress_DataEndpoint.config.json\" -H \"Content-Type: application/json\" -X UPDATE \"http://localhost:5590/api/v1/configuration/OmfEgress/dataendpoints/{id}\" View endpoints curl -v -X GET \"http://localhost:5590/api/v1/configuration/OmfEgress/DataEndpoints\" Egress endpoint configuration schema The following table defines the basic behavior of the OmfEgress_DataEndpoints_schema.json file. Abstract Extensible Status Identifiable Custom Properties Additional Properties Can be instantiated Yes Experimental No Forbidden Forbidden The full schema definition for the egress endpoint configuration is in the OmfEgress_DataEndpoints_schema.json here: Windows: %Program Files%\\OSIsoft\\Adapters\\AdapterName\\Schemas Linux: /opt/OSIsoft/Adapters/AdapterName/Schemas Egress endpoint parameters Parameter Required Type Nullable Description Id Required string Yes Unique identifier Endpoint Required string No Destination that accepts OMF v1.1 messages. Supported destinations include OCS and PI server. ValidateEndpointCertificate Optional boolean No Disables verification of destination certificate. Use for testing only with self-signed certificates. Defaults to true. ClientId Required for OCS endpoint string Yes Authentication with the OCS OMF endpoint. ClientSecret Required for OCS endpoint string Yes Authentication with the OCS OMF endpoint. TokenEndpoint Optional for OCS endpoint string Yes Retrieves an OCS token from an alternative endpoint. Username Required for PI endpoint string Yes Basic authentication to the PI Web API OMF endpoint. Password Required for PI endpoint string Yes Basic authentication to the PI Web API OMF endpoint. Examples The following examples are valid egress configurations. Egress data to OCS [{ \"Endpoint\": \"https://<OCS OMF endpoint>\", \"ClientId\": \"<clientid>\", \"ClientSecret\": \"<clientsecret>\" }] Egress data to PI Web API. [{ \"Endpoint\": \"https://<pi web api server>/piwebapi/omf/\", \"UserName\": \"<username>\", \"Password\": \"<password>\" }] REST URLs Relative URL HTTP verb Action api/v1/configuration/omfegress/DataEndpoints GET Gets all configured egress endpoints api/v1/configuration/omfegress/DataEndpoints DELETE Deletes all configured egress endpoints api/v1/configuration/omfegress/DataEndpoints POST Adds an array of egress endpoints or a single endpoint. Fails if any endpoint already exists api/v1/configuration/omfegress/DataEndpoints PUT Replaces all egress endpoints api/v1/configuration/omfegress/DataEndpoints/{id} GET Gets configured endpoint by id api/v1/configuration/omfegress/DataEndpoints/{id} DELETE Deletes configured endpoint by id api/v1/configuration/omfegress/DataEndpoints/{id} PUT Replaces egress endpoint by id . Fails if endpoint doesn't exist api/v1/configuration/omfegress/DataEndpoints/{id} PATCH Allows partial updating of configured endpoint by id Egress execution details After you add configuration for an egress endpoint, egress will be executed immediately for that endpoint. Egress is handled individually per configured endpoint. On first execution, types and containers will be egressed. After that only new or changed types or containers will be egressed. Type creation must be successful in order to create containers. Container creation must be successful in order to egress data. If an egress endpoint is removed, data flow will immediately end for that endpoint. Any buffered data for the endpoint that has been deleted will be permanently lost. Type, container, and data items are batched into one or more OMF messages when egressing. As per the requirements defined in OMF, a single message payload will not exceed 192KB in size. Compression is automatically applied to outbound egress messages. On the destination, failure to add a single item will result in the message failing. Types, containers, and data will continue to be egressed as long as the destination continues to respond to HTTP requests - retrying previous failures as needed."
  },
  "V1/main/V1/Configuration/Health endpoint configuration.html": {
    "href": "V1/main/V1/Configuration/Health endpoint configuration.html",
    "title": "Health endpoint configuration",
    "keywords": "Health endpoint configuration This section provides information on how to configure your OSIsoft adapters so that health data is produced and stored at the designated health endpoint. For more information about adapter health, see Adapter health . Configure health endpoint A health endpoint designates an OSIsoft OMF endpoint where adapter health information should be sent. You can configure multiple health endpoints. Using any text editor, create a file that contains one or more health endpoints in JSON form. For a table of all available health endpoint parameters, see Health endpoint parameters . Save the file. Use any of the Configuration tools capable of making HTTP requests and execute a POST command with the contents of that file to the following endpoint: http://localhost:5590/api/v1/configuration/system/healthendpoints/ Health endpoints schema The full schema definition for the health endpoint configuration is in the System_HealthEndpoints_schema.json here: Windows: %Program Files%\\OSIsoft\\Adapters\\AdapterName\\Schemas Linux: /opt/OSIsoft/Adapters/AdapterName/Schemas Health endpoint parameters Parameter Required Type Description Id Optional string Uniquely identifies the endpoint. This can be any alphanumeric string. If left blank, a unique value is generated automatically. Endpoint Required string The URL of the OMF endpoint to receive this health data. ClientId Required for OCS endpoints string The Client Id used for authentication with an OSIsoft Cloud Services OMF endpoint. ClientSecret Required for OCS endpoints string The Client Secret used for authentication with an OSIsoft Cloud Services OMF endpoint. Username Required for PI Web API endpoints string The username used to authenticate with a PI Web API OMF endpoint. Password Required for PI Web API endpoints string The password used to authenticate with a PI Web API OMF endpoint. ValidateEndpointCertificate Optional boolean Disables verification of destination security certificate. Use for testing only with self-signed certificates; OSIsoft recommends setting this to true in production environments. Defaults to true."
  },
  "V1/main/V1/Configuration/Logging configuration.html": {
    "href": "V1/main/V1/Configuration/Logging configuration.html",
    "title": "Logging configuration",
    "keywords": "Logging configuration OSIsoft adapters write daily log messages for the adapter, the system, and omf egress to flat text files in the following locations: • Windows: %ProgramData%\\OSIsoft\\Adapters\\adapterName\\adapterId\\Logs • Linux: /usr/share/OSIsoft/Adapters/adapterName/adapterId/Logs Each message in the log displays the message severity level, timestamp, and the message itself. Configure logging To change the logging configuration complete the following steps: Using any text editor, create a file that contains the logging configuration in JSON form. For content structure, see Example Default logging configuration . For all available parameters, see Logging parameters . Save the file, for example as Component_Logging.json . Use any of the Configuration tools capable of making HTTP requests to execute a PUT command with the contents of that file to the following endpoint: http://localhost:5590/api/v1/configuration/<ComponentId>/Logging . Note: Replace <ComponentId> with the ComponentId of the adapter, for example OpcUa1 . Example using curl (run this command from the same directory where the file is located): curl -i -d \"@Component_Logging.json\" -H \"Content-Type: application/json\" -X PUT http://localhost:5590/api/v1/configuration/<ComponentId>/Logging On successful execution, the log level change takes effect immediately during runtime. The other configurations (log file size and file count) get updated after the adapter is restarted. Note: Any parameter not specified in the updated configuration file will revert to the default schema value. Logging schema The full schema definition for the logging configuration is in the component specific logging file: AdapterName_Logging_schema.json , OmfEgress_Logging_schema.json , or System_Logging_schema.json here: Windows: %Program Files%\\OSIsoft\\Adapters\\AdapterName\\Schemas Linux: /opt/OSIsoft/Adapters/AdapterName/Schemas Logging parameters Parameter Required Type Description logLevel Optional reference The logLevel sets the minimum severity for messages to be included in the logs. Messages with a severity below the level set are not included. The log levels in their increasing order of severity are as follows: Trace, Debug, Information, Warning, Error, Critical. For detailed information about the logLevels, see LogLevel . logFileSizeLimitBytes Optional integer The maximum size in bytes of log files that the service will create for the component. It must be a positive integer. logFileCountLimit Optional integer The maximum number of log files that the service will create for the component. It must be a positive integer. LogLevel Level Description Trace Logs that contain the most detailed messages. These messages may contain sensitive application data like actual received values, which is why these messages shouldn’t be enabled in production environment. Debug Logs that can be used to troubleshoot data flow issues by recording metrics and detailed flow related information. Information Logs that track the general flow of the application. Any non-repetitive general information (like version information relating to the software at startup, what external services are being used, data source connection string, number of measurements, egress URL, change of state “Starting”, “Stopping”, or configuration) can be useful for diagnosing potential application errors. Warning Logs that highlight an abnormal or unexpected event in the application flow, but does not otherwise cause the application execution to stop. Warning messages can indicate an unconfigured data source state, that a communication with backup failover instance has been lost, an insecure communication channel in use, or any other event that could require attention, but that does not impact data flow. Error Logs that highlight when the current flow of execution is stopped due to a failure. These should indicate a failure in the current activity, not an application-wide failure. This can indicate an invalid configuration, unavailable external endpoint, internal flow error, and so on. Critical Logs that describe an unrecoverable application or system crash, or a catastrophic failure that requires immediate attention. This can indicate application wide failures like beta timeout expired, unable to start self-hosted endpoint, unable to access vital resource (for example, Data Protection key file), and so on. Example Default logging configuration By default, logging captures Information, Warning, Error, and Critical messages in the message logs. The following logging configuration is the default for a component on install: { \"logLevel\": \"Information\", \"logFileSizeLimitBytes\": 34636833, \"logFileCountLimit\": 31 }"
  },
  "V1/main/V1/Configuration/System and adapter configuration.html": {
    "href": "V1/main/V1/Configuration/System and adapter configuration.html",
    "title": "System and adapter configuration",
    "keywords": "System and adapter configuration You can configure the System and adapter components together using a single call for replacing the existing configuration. Change system and adapter configuration Change the system and adapter configuration by importing the JSON file using a REST client: Using any text editor, create a file that contains the System and adapter configuration in JSON form. For content structure, see Sample configuration file . Save the file. Use any of the Configuration Tools capable of making HTTP requests and execute a PUT command with the contents of that file to the following endpoint: http://localhost:5590/api/v1/configuration -d '{JSON file name}' Example using curl: curl -X http://localhost:5590/api/v1/configuration -d '{JSON file name}' Note: In order for some of the adapter specific configurations to take effect, you have to restart the adapter. If the operation fails due to errors in the configuration, the count of the error and suitable error message(s) are returned in the result. Sample configuration file The following sample includes configuration of System components along with an OPC UA adapter. { \"OpcUa1\": { \"Logging\": { \"logLevel\": \"Information\", \"logFileSizeLimitBytes\": 34636833, \"logFileCountLimit\": 31 }, \"DataSource\": { \"EndpointUrl\": \"opc.tcp://OPCUAServerEndpoint/OPCUA/Server\", \"UseSecureConnection\": false, \"StreamPrefix\": \"OPC_Prefix_\", \"UserName\": null, \"Password\": null, \"RootNodeIds\": null, \"IncomingTimestamp\": \"Source\", \"applyPrefixToStreamId\": true }, \"DataSelection\": [ { \"Selected\": true, \"Name\": \"Sawtooth\", \"NodeId\": \"ns=3;s=Sawtooth\", \"StreamId\": \"SawtoothStream\" } ] }, \"System\": { \"Logging\": { \"logLevel\": \"Information\", \"logFileSizeLimitBytes\": 34636833, \"logFileCountLimit\": 31 }, \"HealthEndpoints\": [ ], \"Components\": [ { \"componentId\": \"Egress\", \"componentType\": \"OmfEgress\" }, { \"componentId\": \"OpcUa1\", \"componentType\": \"OpcUa\" } ] }, \"Egress\": { \"Logging\": { \"logLevel\": \"Information\", \"logFileSizeLimitBytes\": 34636833, \"logFileCountLimit\": 31 }, \"DataEndpoints\": [ { \"id\": \"WebAPI EndPoint\", \"endpoint\": \"https://PIWEBAPIServer/piwebapi/omf\", \"userName\": \"USERNAME\", \"password\": \"PASSWORD\" }, { \"id\": \"OCS Endpoint\", \"endpoint\": \"https://OCSEndpoint/omf\", \"clientId\": \"CLIENTID\", \"clientSecret\": \"CLIENTSECRET\" } ], \"Buffering\": { \"BufferLocation\": \"C:\\\\ProgramData\\\\OSIsoft\\\\Adapters\\\\OpcUa\\\\OpcUa\\\\Buffers\", \"MaxBufferSizeMB\": -1, \"EnableBuffering\": true } } } REST URLs Relative URL HTTP verb Action api/v1/configuration/ PUT Replaces the configuration for the entire adapter"
  },
  "V1/main/V1/Configuration/System components configuration.html": {
    "href": "V1/main/V1/Configuration/System components configuration.html",
    "title": "System components configuration",
    "keywords": "System components configuration OSIsoft adapters use JSON configuration files in a protected directory on Windows and Linux to store configuration that is read on startup. While the files are accessible to view, OSIsoft recommends that you use REST or the edgecmd command line tool for any changes you make to the files. As part of making adapters as secure as possible, any passwords or secrets that you configure are stored in encrypted form (with cryptographic key material stored separately in a secure location.) If you edit the files directly, the adapter may not work as expected. Note: You can edit any single component or facet of the system using REST, but also configure the system as a whole with a single REST call. Configure system components The default System_Components.json file for the System component contains the following information. [ { \"ComponentId\": \"OmfEgress\", \"ComponentType\": \"OmfEgress\" } ] Note: The OmfEgress component is required for this initial release for adapters to run. You can add additional components if you want, but only a single OmfEgress component is supported. Complete the following to add a new component: Using any text editor, create a file that contains the system components configuration in JSON form. For content structure, see System components example . The following example adds a Modbus TCP adapter. { \"ComponentId\": \"Modbus1\", \"ComponentType\": \"Modbus\" } Note: A unique ComponentId is necessary for each component in the system. This example uses the ComponentId Modbus1 since it is the first Modbus TCP adapter: Save the file, for example as AddComponent.json . Use any of the Configuration tools capable of making HTTP requests to execute a POST command with the contents of that file to the following endpoint: http://localhost:5595/api/v1/configuration/system/components Example using curl (run this command from the same directory where the file is located): curl -i -d \"@AddComponent.json\" -H \"Content-Type: application/json\" http://localhost:5595/api/v1/configuration/system/components After the curl command completes successfully, you can configure or use the new component. Delete a system component Complete the following to delete an existing component: Start any tool capable of making HTTP requests. Execute a DELETE command to the following endpoint, replacing <ComponentId To Delete> with the ID of the component that you want to delete, for example OpcUa1: http://localhost:5595/api/v1/configuration/system/components/<ComponentId_To_Delete>/ Example using curl: curl -X DELETE http://localhost:5595/api/v1/configuration/system/components/{ComponentId_To_Delete}/ All the logs and configurations files for the deleted components will be moved to the corresponding logs/Removed or Configuration/Removed folder. System components schema The following table defines the basic behavior of the System_Components_schema.json file. Abstract Extensible Status Identifiable Custom properties Additional properties Can be instantiated Yes Experimental No Forbidden Forbidden The full schema definition for the system components configuration is in the System_Components_schema.json located here: Windows: %Program Files%\\OSIsoft\\Adapters\\AdapterName\\Schemas Linux: /opt/OSIsoft/Adapters/AdapterName/Schemas System components parameters The following parameters are available for configuring system components. Parameters Required Type Nullable Description ComponentId Required string Yes The ID of the component. It can be any alphanumeric string, for example OmfEgress. ComponentType Required string Yes The type of the component, for example OmfEgress. There are two types of components: OmfEgress and the adapter. System components example [ { \"componentId\": \"Modbus1\", \"componentType\": \"Modbus\" }, { \"componentId\": \"Modbus2\", \"componentType\": \"Modbus\" }, { \"ComponentId\": \"OmfEgress\", \"ComponentType\": \"OmfEgress\" } ]"
  },
  "V1/main/V1/Diagnostics/Adapter diagnostics.html": {
    "href": "V1/main/V1/Diagnostics/Adapter diagnostics.html",
    "title": "Adapter diagnostics",
    "keywords": "Adapter diagnostics The adapter and its components produce different kinds of diagnostics data which is sent to all health endpoints. The System_Diagnostics.json file contains a flag which determines whether Diagnostics are enabled. You can change this at runtime through REST calls or the EdgeCmd utility. Diagnostics data are collected by default. To egress diagnostics related data, you have to configure an adapter health endpoint first. See Health endpoint configuration . AF structure After running diagnostics with a health endpoint configured to a PI server, you can use PI System Explorer to view the diagnostics for a given adapter. The element hierarchy is shown in the following image. The_ Elements root contains a link to an Adapters _ node. This is the root note for all adapter instances. Below Adapters there will be one or more adapter nodes. Each node's title is defined by the node's corresponding computer name and service name in this format: _**{ComputerName}.{ServiceName}**_ . For example, in the following image, RGRALAK5530 is the computer name, and SignalGenerator is the service name. To see the System.Diagnostics values, clicking on an adapter node and set the tab to Attributes . Example values are shown in the image."
  },
  "V1/main/V1/Diagnostics/Egress diagnostics.html": {
    "href": "V1/main/V1/Diagnostics/Egress diagnostics.html",
    "title": "Egress diagnostics",
    "keywords": "Egress diagnostics The Egress component of the adapter produces the following diagnostics streams. IO rate The Diagnostics.Egress.IORate dynamic type includes these values, which are logged in a stream with the id {machineName}.{serviceName}.OmfEgress.{EndpointId}.IORate. IO rate includes only sequential data sucessfully sent to an egress. Type Property Description string timestamp Timestamp of event double IORate 1-minute rolling average of data rate (streams/second)"
  },
  "V1/main/V1/Diagnostics/Error rate.html": {
    "href": "V1/main/V1/Diagnostics/Error rate.html",
    "title": "Error rate",
    "keywords": "Error rate The Diagnostics.Adapter.ErrorRate dynamic type includes these values, which are logged in a stream with the id {componentid}.ErrorRate. Type Property Description string timestamp Timestamp of event double ErrorRate 1-minute rolling average of error rate (streams/second)"
  },
  "V1/main/V1/Diagnostics/IO rate.html": {
    "href": "V1/main/V1/Diagnostics/IO rate.html",
    "title": "IO rate",
    "keywords": "IO rate The Diagnostics.Adapter.IORate dynamic type includes these values, which are logged in a stream with the id {componentid}.IORate. IO rate includes only sequential data collected from a data source. Type Property Description string timestamp Timestamp of event double IORate 1-minute rolling average of data rate (streams/second)"
  },
  "V1/main/V1/Diagnostics/Stream count.html": {
    "href": "V1/main/V1/Diagnostics/Stream count.html",
    "title": "Stream count",
    "keywords": "Stream count The Diagnostics.StreamCountEvent dynamic type includes these values, which are logged in a stream with the id {componentid}.StreamCount. The stream count and type count include only types and streams created for sequential data received from a data source. Type Property Description string timestamp Timestamp of event int StreamCount Number of streams created by the adapter instance int TypeCount Number of types created by the adapter instance"
  },
  "V1/main/V1/Diagnostics/System.html": {
    "href": "V1/main/V1/Diagnostics/System.html",
    "title": "System",
    "keywords": "System The Diagnostics.System dynamic type includes the following values which are logged in a stream with the id System.Diagnostics. This diagnostic stream contains system level information related to the host platform that the adapter is running on. Type Property Description string timestamp Timestamp of event int ProcessIdentifier Process id of the host process string StartTime Time at which the host process started long WorkingSet Amount of physical memory in bytes, allocated for the host process double TotalProcessorTime (uom=s) Total processor time for the host process expressed in seconds double TotalUserProcessorTime (uom=s) User processor time for the host process expressed in seconds double TotalPrivilegedProcessorTime (uom=s) Privileged processor time for the host process expressed in seconds int ThreadCount Number of threads in the host process int HandleCount Number of handles opened by the host process double ManagedMemorySize (uom=MB) Number of bytes currently thought to be allocated in managed memory double PrivateMemorySize (uom=MB) Amount of paged memory, in bytes, allocated for the host process double PeakPagedMemorySize (uom=MB) Maximum amount of memory in the virtual memory paging file, in bytes, used by the host process. double StorageTotalSize (uom=MB) Total size of the storage medium in use by the system double StorageFreeSpace (uom=MB) Free space available Each adapter component produces its own diagnostics streams."
  },
  "V1/main/V1/Health/Adapter health.html": {
    "href": "V1/main/V1/Health/Adapter health.html",
    "title": "Adapter health",
    "keywords": "Adapter health OSIsoft adapters produce different kinds of health data, which can be egressed to different health endpoints. For details, see the following sections. Available health data Dynamic data is sent every minute to configured health endpoints. The following health data are available: Device status Next Health Message Expected Health endpoint differences Two following two OMF endpoints are currently supported for adapter health data: PI Web API OSIsoft Cloud Services There are a few differences in how these two systems treat the associated health data. PI Web API parses the information and sends it configured PI Systems for the OMF endpoint. The static data is used to create a hierarchy on a PI AF server similar to the following: The dynamic health data is actually time-series data that is stored in PI points on a PI Data Archive and can be seen in the AF hierarchy as PI Point Data Reference attributes. OSIsoft Cloud Services currently does not have a way to store the static metadata. For OCS-based adapter health endpoints, only the dynamic data will be stored. Each value will be its own stream with the timestamp property as the single index."
  },
  "V1/main/V1/Health/Device status.html": {
    "href": "V1/main/V1/Health/Device status.html",
    "title": "Device status",
    "keywords": "Device status The device status indicates the health of this component and whether or not it is currently communicating properly with the data source. This time-series data is stored within a PI point or OCS stream, depending on the endpoint type. During healthy steady-state operation, a value of \"Good\" is expected. Property Type Description Time string Timestamp of the event. DeviceStatus string The value of the DeviceStatus. The possible statuses are: Status Meaning Good The component is connected to the data source and it is collecting data. ConnectedNoData The component is connected to the data source but it is not receiving data from it. AttemptingFailover The adapter is attempting to failover. Starting The component is currently in the process of starting up and is not yet connected to the data source. DeviceInError The component encountered an error either while connecting to the data source or attempting to collect data. Shutdown The component is either in the process of shutting down or has finished."
  },
  "V1/main/V1/Health/Health and diagnostics.html": {
    "href": "V1/main/V1/Health/Health and diagnostics.html",
    "title": "Health and Diagnostics",
    "keywords": "Health and Diagnostics OSIsoft adapters produce various types of health data. You can use health data to ensure that your adapters are running properly and data is flowing to the configured OSIsoft OMF endpoints. For more information, see Adapter health . OSIsoft adapters also produce diagnostic data. You can use diagnostic data to find more information about a particular adapter instance. Diagnostic data lives alongside the health data and you can egress it using a Health Endpoint and setting EnableDiagnostics = true. For more information, see Adapter diagnostics . The examples in the health and diagnostics topics use curl, a commonly available tool on both Windows and Linux. You can use the same operations with any programming language or tool that supports making REST calls. You can also configure OSIsoft adapters with the EdgeCmd utility. For more information, see EdgeCmd utility . To validate successful configurations, you can accomplish data retrieval steps (GET commands) using a browser, if available on your device. For more information on OSIsoft adapter configuration tools, see Configuration tools ."
  },
  "V1/main/V1/Health/Next health message expected.html": {
    "href": "V1/main/V1/Health/Next health message expected.html",
    "title": "Next health message expected",
    "keywords": "Next health message expected This property is similar to a heartbeat. A new value for NextHealthMessageExpected will be sent by an individual adapter data component on a periodic basis while it is functioning properly. This value will be a timestamp indicating when the next value should be received. When monitoring, if the next value is not received by the indicated time, this likely means that there is an issue. It could be an issue with the adapter, adapter component, network connection between the health endpoint and the adapter, etc. Property Type Description Time string Timestamp of the event. NextHealthMessageExpected string Timestamp when next value is expected."
  },
  "V1/main/V1/Installation/Install the adapter.html": {
    "href": "V1/main/V1/Installation/Install the adapter.html",
    "title": "Install the adapter",
    "keywords": "Install the adapter Complete the following for your operating system to install an OSIsoft adapter: Windows To install an OSIsoft adapter on Windows, complete the following steps: Download the Windows .msi file from the OSIsoft Customer portal , for example Modbus_win10-x64.msi or OpcUa_win10-x64.msi . Open a command prompt. Change to the directory into which you downloaded the .msi file. Run the .msi file. Follow the setup wizard. Result: The OSIsoft adapter is installed on Windows and you can now configure it. Linux To install an OSIsoft adapter on Linux, complete the following steps: Download the appropriate Linux distribution file from the OSIsoft Customer portal , for example Modbus_linux-x64.deb or OpcUa_linux-x64.deb . As a superuser, open a terminal. Install the OSIsoft adapter with the sudo apt install command. For example, to install the Linux ARM Debian package, run command. sudo apt install ./Modbus_linux-arm.deb . To install the Linux x64 package, run command sudo apt install ./Modbus_linux-x64.deb . Result: The OSIsoft adapter is installed on Linux and you can now configure it."
  },
  "V1/main/V1/Installation/Installation.html": {
    "href": "V1/main/V1/Installation/Installation.html",
    "title": "Installation",
    "keywords": "Installation You can install OSIsoft adapters using an install kit. To download any OSIsoft adapter, go to the OSIsoft Customer Portal . For a list of supported operating systems and further installation requirements, see the following list. Installation prerequisites OSIsoft adapters support .NET Core 3.1., which is supported on the following operating systems: Alpine: 3.10+ Debian: 9+ Ubuntu: 16.04+ Fedora: 29+ centOS: 7+ RHEL: 6+ openSUSE: 15+ SUSE Enterprise Linux (SLES): 12 SP2+ macOS: 10.13+ Windows Client: 7, 8.1, 10 (1607+) Note: OSIsoft does no longer support Windows 7. Windows Server: 2012 R2+ OSIsoft adapters also require PI Web API."
  },
  "V1/main/V1/Installation/Uninstall the adapter.html": {
    "href": "V1/main/V1/Installation/Uninstall the adapter.html",
    "title": "Uninstall the adapter",
    "keywords": "Uninstall the adapter Complete the following for your operating system to uninstall an OSIsoft adapter: Windows To remove the OSIsoft adapter program files from a Windows device, use the Windows Control Panel uninstall application process. Note: The configuration, data, and log files are not removed by the uninstall process. Optional: To remove data, configuration and log files, remove the directory C:\\ProgramData\\OSIsoft\\Adapters\\AdapterName . This will delete all data processed by the adapter in addition to configuration and log files. Linux To remove OSIsoft adapter software from a Linux device, open a terminal window and run the following command: sudo apt remove osisoft.adapters.<AdapterName> Optional: To remove data, configuration, and log files, remove the directory /usr/share/OSIsoft/Adapters/AdapterName . This will delete all data processed by the adapter, in addition to configuration and log files. Alternatively, you can run the following command: sudo rm -r /usr/share/OSIsoft/Adapters/<AdapterName>"
  },
  "V1/main/V1/readme.html": {
    "href": "V1/main/V1/readme.html",
    "title": "",
    "keywords": ""
  },
  "V1/main/V1/Troubleshooting/Data buffering.html": {
    "href": "V1/main/V1/Troubleshooting/Data buffering.html",
    "title": "Data buffering",
    "keywords": "Data buffering"
  },
  "V1/main/V1/Troubleshooting/Logging.html": {
    "href": "V1/main/V1/Troubleshooting/Logging.html",
    "title": "Logging",
    "keywords": "Logging"
  },
  "V1/main/V1/Troubleshooting/Troubleshooting.html": {
    "href": "V1/main/V1/Troubleshooting/Troubleshooting.html",
    "title": "Troubleshooting",
    "keywords": "Troubleshooting"
  },
  "V1/OSIsoft Adapter for BACnet overview/OSIsoft Adapter for BACnet principles of operation.html": {
    "href": "V1/OSIsoft Adapter for BACnet overview/OSIsoft Adapter for BACnet principles of operation.html",
    "title": "OSIsoft Adapter for BACnet principles of operation",
    "keywords": "OSIsoft Adapter for BACnet principles of operation This adapter's operations focus on data collection and streams creation. Adapter configuration In order for the BACnet adapter to start data collection, you need to configure the adapter by defining the following: Data source: Provide the data source from which the adapter should collect data. Data selection: Perform selection of BACnet items to which the adapter should subscribe for data. Logging: Set up the logging attributes to manage the adapter logging behavior. For more information, see OSIsoft Adapter for BACnet data source configuration and OSIsoft Adapter for BACnet data selection configuration . Connection The BACnet adapter uses the binary bacnet.tcp protocol to communicate with the BACnet servers. When a secured connection is enabled, the X.509-type client and server certificates are exchanged and verified and the connection between the BACnet adapter and the configured BACnet server is established. Stream creation The BACnet adapter creates types upon receiving the value update for a stream. One stream is created for every selected BACnet item in the data selection configuration. Data collection The BACnet adapter collects time-series data from selected BACnet dynamic variables through BACnet subscriptions (unsolicited reads). The adapter supports the Data Access (DA) part of BACnet specification. Streams by BACnet adapter The BACnet adapter creates a stream with two properties per selected BACnet item. The properties are described in the following table: Property name Data type Description Timestamp DateTime Timestamp of the given BACnet item value update. Value Based on type of incoming BACnet value Value of the given BACnet item update. Stream ID is a unique identifier for each stream created by the adapter for a given BACnet item. If the Custom Stream ID is specified for the BACnet item in data selection configuration, the BACnet adapter uses that as a stream ID for the stream. Otherwise, the adapter constructs the stream ID using the following format constructed from the BACnet item node ID: <Adapter Component ID>.<Namespace>.<Identifier> Note: The naming convention is affected by StreamPrefix and ApplyPrefixToStreamID settings in data source configuration. For more information, see OSIsoft Adapter for BACnet data source configuration . Vegetables Fruits Mango Orange Orange 1 Orange 2 Orange 2.A Orange 2.B"
  },
  "V1/OSIsoft Adapter for BACnet overview/OSIsoft Adapter for BACnet supported features.html": {
    "href": "V1/OSIsoft Adapter for BACnet overview/OSIsoft Adapter for BACnet supported features.html",
    "title": "OSIsoft Adapter for BACnet supported features",
    "keywords": "OSIsoft Adapter for BACnet supported features This adapter provides several features including data types and bitmaps. Data types The following table lists BACnet variable types that the adapter supports data collection from and types of streams that are going to be created. BACnet data type Stream data type Boolean Boolean Byte Int16 SByte Int16 Int16 Int16 UInt16 UInt16 Int32 Int32 UInt32 UInt32 Int64 Int64 UInt64 UInt64 Float Float32 Double Float64 DateTime DateTime String String Export operation The adapter is able to export available BACnet dynamic variables by browsing the BACnet hierarchies or sub-hierarchies. Export operation actions To limit browsing, specify a comma-separated collection of nodeIds in data source configuration (RootNodeIds). Note: They are treated as roots from where the adapter starts the browse operation. The adapter triggers an export operation after a successful connection to the BACnet server when the data selection file does not exist in configuration directory. Copy the exported data selection JSON file from the directory or retrieve it using a REST API call. Optional: To avoid a potentially long and expensive browse operation, create the data selection file manually. Configure it before you configure the data source or push both in one configuration call together."
  },
  "V1/OSIsoft Adapter for BACnet overview/testfile.html": {
    "href": "V1/OSIsoft Adapter for BACnet overview/testfile.html",
    "title": "System and adapter configuration",
    "keywords": "Click to see the code. python print(\"hello world!\") System and adapter configuration The System and adapter components can be configured together using a single call for replacing the existing configuration. Change system and adapter configuration Change the system and adapter configuration by importing the JSON file using a REST client: Using any text editor, create a file that contains the System and adapter configuration in JSON form. For content structure, see Example . Save the file, for example as SystemAdapter.config.json . Use any of the Configuration Tools capable of making HTTP requests and execute a PUT command with the contents of that file to the following endpoint: http://localhost:5590/api/v1/configuration Note: 5590 is the default port number. If you selected a different port number, replace it with that value. Example using curl (run this file from the same directory where the file is located): curl -d \"@SystemAdapter.config.json\" -H \"Content-Type: application/json\" -X PUT \"http://localhost:5590/api/v1/configuration\" Note: In order for some of the adapter specific configurations to take effect, you have to restart the adapter. If the operation fails due to errors in the configuration, the count of the error and suitable error message(s) are returned in the result. Examples Sample configuration file The following sample file shows the configuration of an OPC UA adapter. { \"OpcUa1\": { \"Logging\": { \"logLevel\": \"Information\", \"logFileSizeLimitBytes\": 34636833, \"logFileCountLimit\": 31 }, \"DataSource\": { \"EndpointUrl\": \"opc.tcp://OPCUAServerEndpoint/OPCUA/Server\", \"UseSecureConnection\": false, \"StreamPrefix\": \"OPC_Prefix_\", \"UserName\": null, \"Password\": null, \"RootNodeIds\": null, \"IncomingTimestamp\": \"Source\", \"applyPrefixToStreamId\": true }, \"DataSelection\": [ { \"Selected\": true, \"Name\": \"Sawtooth\", \"NodeId\": \"ns=3;s=Sawtooth\", \"StreamId\": \"SawtoothStream\" } ] }, \"System\": { \"Logging\": { \"logLevel\": \"Information\", \"logFileSizeLimitBytes\": 34636833, \"logFileCountLimit\": 31 }, \"HealthEndpoints\": [ ], \"Diagnostics\": { \"enableDiagnostics\": true }, \"Components\": [ { \"componentId\": \"Egress\", \"componentType\": \"OmfEgress\" }, { \"componentId\": \"OpcUa1\", \"componentType\": \"OpcUa\" } ], \"Buffering\": { \"BufferLocation\": \"C:/ProgramData/OSIsoft/Adapters/OpcUa/OpcUa/Buffers\", \"MaxBufferSizeMB\": -1, \"EnableBuffering\": true } }, \"OmfEgress\": { \"Logging\": { \"logLevel\": \"Information\", \"logFileSizeLimitBytes\": 34636833, \"logFileCountLimit\": 31 }, \"DataEndpoints\": [ { \"id\": \"WebAPI EndPoint\", \"endpoint\": \"https://PIWEBAPIServer/piwebapi/omf\", \"userName\": \"USERNAME\", \"password\": \"PASSWORD\" }, { \"id\": \"OCS Endpoint\", \"endpoint\": \"https://OCSEndpoint/omf\", \"clientId\": \"CLIENTID\", \"clientSecret\": \"CLIENTSECRET\" } ] } }"
  },
  "V1/OSIsoft_Adapter_for_BACnet_overview.html": {
    "href": "V1/OSIsoft_Adapter_for_BACnet_overview.html",
    "title": "OSIsoft Adapter for BACnet overview",
    "keywords": "OSIsoft Adapter for BACnet overview OPC UA is an open standard, which ensures interoperability, security, and reliability of industrial automation devices and systems. OPC UA is recognized as one of the key communication and data modeling technologies of Industry 4.0, due to the fact that it works with many software platforms, and is completely scalable and flexible. The OPC UA adapter transfers time-series data from OPC UA devices to an endpoint on a device. You can add a single OPC UA adapter during installation. For more information, see Installation . As with other adapters, the OPC UA adapter is configured with data source and data selection JSON files. The data source configurations are identical with other adapters, but OPC UA supports an option to generate a data selection file template that you can manually edit and use for subsequent configuration. For details, see OSIsoft Adapter for BACnet data selection configuration . Once you create a template file, you can reuse it on both Linux and Windows without changes."
  }
}